<!DOCTYPE idea-plugin PUBLIC "Plugin/DTD" "http://plugins.intellij.net/plugin.dtd">
<idea-plugin>
  <module-components>
    <component>
      <implementation-class>org.jetbrains.plugins.clojure.config.ClojureFacetListener</implementation-class>
    </component>
  </module-components>

  <name>La Clojure</name>
  <id>org.intellij.clojure.redux</id>
  <description>Provides Clojure language support: syntax and error highlighting, completion, navigation and
    refactorings
  </description>
  <category>Custom Languages</category>
  <version>VERSION</version>
  <vendor logo="/org/jetbrains/plugins/clojure/icons/clojure_icon_16x16.png" url="http://www.jetbrains.com">JetBrains
    Inc.
  </vendor>
  <!--<idea-version since-build="SINCE_IDEA" until-build="UNTIL_IDEA"/>-->
  <idea-version since-build="IC-120.305" until-build="IC-120.9999"/>

  <extensions defaultExtensionNs="com.intellij">
    <errorHandler implementation="com.intellij.diagnostic.ITNReporter"/>
    <fileTypeFactory implementation="org.jetbrains.plugins.clojure.file.ClojureFileTypeLoader"/>
    <lang.braceMatcher language="Clojure" implementationClass="org.jetbrains.plugins.clojure.highlighter.ClojureBraceMatcher"/>
    <syntaxHighlighter key="Clojure" implementationClass="org.jetbrains.plugins.clojure.highlighter.ClojureSyntaxHighlighter"/>
    <colorSettingsPage implementation="org.jetbrains.plugins.clojure.highlighter.ClojureColorsAndFontsPage"/>
    <lang.commenter language="Clojure" implementationClass="org.jetbrains.plugins.clojure.highlighter.ClojureCommenter"/>
    <lang.parserDefinition language="Clojure" implementationClass="org.jetbrains.plugins.clojure.parser.ClojureParserDefinition"/>
    <lang.foldingBuilder language="Clojure" implementationClass="org.jetbrains.plugins.clojure.ClojureFoldingBuilder"/>
    <lang.psiStructureViewFactory language="Clojure" implementationClass="org.jetbrains.plugins.clojure.structure.ClojureStructureViewBuilderFactory"/>
    <codeStyleSettingsProvider implementation="org.jetbrains.plugins.clojure.formatter.codeStyle.ClojureCodeStyleSettingsProvider"/>
    <lang.findUsagesProvider language="Clojure" implementationClass="org.jetbrains.plugins.clojure.findUsages.ClojureFindUsagesProvider"/>
    <consoleFilterProvider implementation="org.jetbrains.plugins.clojure.runner.console.ClojureConsoleFilterProvider"/>
    <completion.contributor language="Clojure" implementationClass="org.jetbrains.plugins.clojure.completion.ClojureCompletionContributor"/>
    <compiler.makeDependencyProcessor implementation="org.jetbrains.plugins.clojure.compiler.ClojureDependencyProcessor"/>
    <configurationType implementation="org.jetbrains.plugins.clojure.runner.ClojureScriptRunConfigurationType"/>
    <configurationProducer implementation="org.jetbrains.plugins.clojure.runner.ClojureScriptRunConfigurationProducer"/>
    <fileTemplateGroup implementation="org.jetbrains.plugins.clojure.actions.ClojureTemplatesFactory"/>
    <renameInputValidator implementation="org.jetbrains.plugins.clojure.refactoring.rename.ClojureRenameInputValidator"/>
    <fileTypeIndentOptionsProvider implementation="org.jetbrains.plugins.clojure.formatter.ClojureIndentOptionsProvider"/>
    <quoteHandler fileType="Clojure" className="org.jetbrains.plugins.clojure.editor.ClojureQuoteHandler"/>
    <debuggerClassFilterProvider implementation="org.jetbrains.plugins.clojure.debugger.filters.ClojureDebugClassesFilterProvider"/>
    <gotoSymbolContributor implementation="org.jetbrains.plugins.clojure.gotoclass.ClojureGoToSymbolContributor"/>
    <gotoClassContributor implementation="org.jetbrains.plugins.clojure.gotoclass.ClojureGoToClassContributor"/>
    <xdebugger.settings implementation="org.jetbrains.plugins.clojure.debugger.filters.ClojureDebuggerSettings"/>
    <indexPatternBuilder implementation="org.jetbrains.plugins.clojure.editor.todo.ClojureIndexPatternBuilder"/>
    <java.shortNamesCache implementation="org.jetbrains.plugins.clojure.psi.stubs.ClojureShortNamesCache"/>

    <stubElementTypeHolder class="org.jetbrains.plugins.clojure.parser.ClojureElementTypes"/>

    <stubIndex implementation="org.jetbrains.plugins.clojure.psi.stubs.index.ClDefNameIndex"/>
    <stubIndex implementation="org.jetbrains.plugins.clojure.psi.stubs.index.ClojureNsNameIndex"/>
    <stubIndex implementation="org.jetbrains.plugins.clojure.psi.stubs.index.ClojureKeywordIndex"/>
    <stubIndex implementation="org.jetbrains.plugins.clojure.psi.stubs.index.ClojureClassNameIndex"/>
    <stubIndex implementation="org.jetbrains.plugins.clojure.psi.stubs.index.ClojureFullScriptNameIndex"/>

    <extendWordSelectionHandler implementation="org.jetbrains.plugins.clojure.editor.selection.ClojureListSelectioner"/>
    <extendWordSelectionHandler implementation="org.jetbrains.plugins.clojure.editor.selection.ClojureLiteralSelectioner"/>
    <debugger.codeFragmentFactory implementation="org.jetbrains.plugins.clojure.debugger.ClojureCodeFragmentFactory"/>
    <!-- <unscrambleSupport implementation="org.jetbrains.plugins.clojure.debugger.ClojureUnscrambler"/> -->
    <compilerSettingsFactory implementation="org.jetbrains.plugins.clojure.compiler.ClojureCompilerSettingsFactory"/>
    <frameworkSupport implementation="org.jetbrains.plugins.clojure.config.ClojureFacetSupportProvider"/>

    <projectService serviceInterface="org.jetbrains.plugins.clojure.psi.util.ClojurePsiFactory"
                    serviceImplementation="org.jetbrains.plugins.clojure.psi.util.ClojurePsiElementFactoryImpl"/>

    <projectConfigurable implementation="org.jetbrains.plugins.clojure.settings.ClojureConfigurable"/>
    <projectService serviceInterface="org.jetbrains.plugins.clojure.settings.ClojureProjectSettings"
                    serviceImplementation="org.jetbrains.plugins.clojure.settings.ClojureProjectSettings"/>

    <java.elementFinder implementation="org.jetbrains.plugins.clojure.psi.impl.javaView.ClojureClassFinder"/>
    <lang.namesValidator language="Clojure"
                         implementationClass="org.jetbrains.plugins.clojure.refactoring.rename.ClojureNameValidator"/>
    <referencesSearch implementation="org.jetbrains.plugins.clojure.findUsages.ClojureReferenceSearcher"/>
    <renamePsiElementProcessor
        implementation="org.jetbrains.plugins.clojure.refactoring.rename.RenameClojureFileProcessor" order="first"/>

    <toolWindow id="REPL" secondary="true" icon="/org/jetbrains/plugins/clojure/icons/clojure_icon_16x16.png"
                anchor="right" factoryClass="org.jetbrains.plugins.clojure.repl.toolwindow.REPLToolWindowFactory"/>
    <editorActionHandler action="EditorEnter"
                         implementationClass="org.jetbrains.plugins.clojure.repl.toolwindow.actions.REPLEnterAction"
                         order="FIRST"/>
  </extensions>

  <application-components>
    <component>
      <implementation-class>org.jetbrains.plugins.clojure.ClojureLoader</implementation-class>
    </component>
    <component>
      <implementation-class>org.jetbrains.plugins.clojure.config.ClojureFacetLoader</implementation-class>
      <interface-class>org.jetbrains.plugins.clojure.config.ClojureFacetLoader</interface-class>
    </component>
    <component>
      <implementation-class>org.jetbrains.plugins.clojure.repl.REPLComponent</implementation-class>
    </component>
  </application-components>

  <project-components>
    <component>
      <implementation-class>org.jetbrains.plugins.clojure.compiler.ClojureCompilerSettings</implementation-class>
    </component>
    <component>
      <implementation-class>org.jetbrains.plugins.clojure.compiler.component.ClojureCompilerProjectComponent
      </implementation-class>
    </component>
    <component>
      <implementation-class>org.jetbrains.plugins.clojure.psi.impl.javaView.ClojureClassFinder
      </implementation-class>
    </component>
    <component>
      <implementation-class>org.jetbrains.plugins.clojure.psi.impl.ClojurePsiManager</implementation-class>
    </component>
    <component>
      <implementation-class>org.jetbrains.plugins.clojure.editor.braceHighlighter.ClojureBraceHighlighter
      </implementation-class>
    </component>
  </project-components>

  <actions>
    <!-- Create file actions -->
    <action id="Clojure.ClojureFile" class="org.jetbrains.plugins.clojure.actions.NewClojureFileAction"
            text="Clojure File" description="Create new Clojure File">
      <add-to-group group-id="NewGroup" anchor="before" relative-to-action="NewFromTemplate"/>
    </action>

    <!-- REPL-related actions -->
    <group id="Clojure.REPL.Group"
           class="org.jetbrains.plugins.clojure.repl.actions.ClojureReplActionGroup"
           text="Clojure REPL" description="Clojure" popup="true">

      <action id="org.jetbrains.plugins.clojure.repl.actions.LoadClojureFileInConsoleAction"
              class="org.jetbrains.plugins.clojure.repl.actions.LoadClojureFileInConsoleAction"
              text="Load file in REPL">
        <keyboard-shortcut keymap="$default" first-keystroke="ctrl shift L"/>
      </action>

      <action id="org.jetbrains.plugins.clojure.repl.actions.RunSelectedTextAction"
              class="org.jetbrains.plugins.clojure.repl.actions.RunSelectedTextAction"
              text="Run selected text in REPL">
        <keyboard-shortcut keymap="$default" first-keystroke="ctrl shift J"/>
      </action>

      <action id="org.jetbrains.plugins.clojure.repl.actions.RunLastSExprAction"
              class="org.jetbrains.plugins.clojure.repl.actions.RunLastSExprAction"
              text="Execute last S-expression in REPL">
        <keyboard-shortcut keymap="$default" first-keystroke="ctrl shift H"/>
      </action>

      <action id="org.jetbrains.plugins.clojure.repl.actions.RunTopSExprAction"
              class="org.jetbrains.plugins.clojure.repl.actions.RunTopSExprAction"
              text="Run Top S-expression in REPL">
        <keyboard-shortcut keymap="$default" first-keystroke="ctrl shift G"/>
      </action>

      <add-to-group group-id="ToolsMenu" anchor="last"/>
      <add-to-group group-id="EditorPopupMenu" anchor="last"/>
    </group>

    <!-- Structural Editing -->

    <group id="ClojureStructuralEditingActionGroup"
           class="org.jetbrains.plugins.clojure.editor.ClojureEditorActionGroup"
           text="Clojure Editor" description="Clojure" popup="true">

      <action id="org.jetbrains.plugins.clojure.actions.editor.BarfBackwardsAction"
              class="org.jetbrains.plugins.clojure.actions.editor.BarfBackwardsAction"
              text="Barf Backwards" description="Spit out the first element in the current s-expression">
        <keyboard-shortcut keymap="$default" first-keystroke="meta shift 9"/>
      </action>

      <action id="org.jetbrains.plugins.clojure.actions.editor.BarfForwardsAction"
              class="org.jetbrains.plugins.clojure.actions.editor.BarfForwardsAction"
              text="Barf Forwards" description="Spit out the last element in the current s-expression">
        <keyboard-shortcut keymap="$default" first-keystroke="meta shift 0"/>
      </action>

      <action id="org.jetbrains.plugins.clojure.actions.editor.SlurpBackwardsAction"
              class="org.jetbrains.plugins.clojure.actions.editor.SlurpBackwardsAction"
              text="Slurp Backwards" description="Swallow the element preceeding the current s-expression">
        <keyboard-shortcut keymap="$default" first-keystroke="ctrl shift 9"/>
      </action>

      <action id="org.jetbrains.plugins.clojure.actions.editor.SlurpForwardsAction"
              class="org.jetbrains.plugins.clojure.actions.editor.SlurpForwardsAction"
              text="Slurp Forwards" description="Swallow the element following the current s-expression">
        <keyboard-shortcut keymap="$default" first-keystroke="ctrl shift 0"/>
      </action>

      <action id="org.jetbrains.plugins.clojure.actions.editor.SpliceAction"
              class="org.jetbrains.plugins.clojure.actions.editor.SpliceAction"
              text="Splice S-Expression" description="Splice the current s-expression into it’s parent">
        <keyboard-shortcut keymap="$default" first-keystroke="alt meta S"/>
      </action>

      <add-to-group group-id="EditMenu" anchor="last"/>

    </group>

    <action id="org.jetbrains.plugins.clojure.repl.toolwindow.actions.NewExternalConsoleAction"
            class="org.jetbrains.plugins.clojure.repl.toolwindow.actions.NewExternalConsoleAction"
            text="Start Clojure Console"
            description="Runs Clojure REPL">
      <add-to-group group-id="ToolsMenu" anchor="last"/>
    </action>

    <action id="Clojure.REPL.Execute.Immediately"
            class="com.intellij.openapi.actionSystem.EmptyAction"
            text="Execute Current Statement">
      <keyboard-shortcut keymap="$default" first-keystroke="control ENTER"/>
    </action>

    <action id="Clojure.REPL.History.Previous"
            class="com.intellij.openapi.actionSystem.EmptyAction"
            text="Select Previous History Item">
      <keyboard-shortcut keymap="$default" first-keystroke="control UP"/>
    </action>

    <action id="Clojure.REPL.History.Next"
            class="com.intellij.openapi.actionSystem.EmptyAction"
            text="Select Next History Item">
      <keyboard-shortcut keymap="$default" first-keystroke="control DOWN"/>
    </action>

  </actions>


</idea-plugin>
